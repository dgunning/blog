{
  
    
        "post0": {
            "title": "Building a COVID-19 Research Engine",
            "content": ". The COVID-19 Open Research Dataset Challenge dataset was created on Kaggle by a coalition of research groups to encourage Kagglers to help find solutions to the COVID-19 pandemic by making it easier to search thousands of medical research papers. This notebook was my contribution to the challenge. It contains a small notebook-oriented library called the CORD Research Engine_, which uses search and NLP technology to simplify searching the CORD Research Paper dataset for information that would help solve the current pandemic&quot; . Getting Started . Data files . The CORD-19 dataset on Kaggle contains over 59,000 research papers. This notebook references about 2,000 of those papers, located in the directory data. Inside the data directory, the CORD Research data is located in the CORD-19-research-challenge subdirectory. For the full dataset please see the competition page on Kaggle. . Navigating the data . The original notebook was a Python kernel on Kaggle. On kaggle the data directory is /kaggle/input and when you launch a new notebook you are given a block of code to view the data in the directory. . import os for dirname, _, filenames in os.walk(&#39;/kaggle/input&#39;): for filename in filenames: print(os.path.join(dirname, filename)) . The Data Directory . Instead of the code above we will use pathlib for navigating the filesystem because it is a little bit easier to use than os.path. From pathlib we will use the Path and PurePath classes. The Path class provides almost all the functionality we need except that it cannot be passed directly into _pandas.readcsv as can be done with the PurePath. . Now we can create a Path object at the location of the CORD research data and view the contents of that directory. . from pathlib import Path, PurePath data_path = Path(&#39;data/CORD-19-research-challenge&#39;) list(data_path.glob(&#39;*&#39;)) . [WindowsPath(&#39;data/CORD-19-research-challenge/biorxiv_medrxiv&#39;), WindowsPath(&#39;data/CORD-19-research-challenge/comm_use_subset&#39;), WindowsPath(&#39;data/CORD-19-research-challenge/cord_19_embeddings.csv&#39;), WindowsPath(&#39;data/CORD-19-research-challenge/custom_license&#39;), WindowsPath(&#39;data/CORD-19-research-challenge/metadata.csv&#39;), WindowsPath(&#39;data/CORD-19-research-challenge/noncomm_use_subset&#39;)] . The CORD-19 data directory contains four sub-directories, the JSON contents of the research papers, and a metadata.csv file with the metadata for all the research papers. For the actual details of the CORD Research papers dataset, see the description on the Kaggle site. . Research Engine Design . A tale of two indexes . We will build two indexes into the data: one for search, and one for similarity. An index is just a data structure that provides a way to sort some data. In our case, for search, we want to provide a search term to the index and have it return a list of the research papers, sorted by most relevant to the search term. . With the similarity index, the goal is to provide a research paper as input and have the index return a list of papers sorted by the most similar to that paper. . In the real world, and for applications that you may write, you may encounter those two use cases, so we will show the best techniques to fulfill the requirements. Search and Similarity are related but not identical areas, and both the indexes we will build are better at one than the other. . Object-Oriented Design . An object-oriented design is rarely used with notebooks, and for good reason. A notebook is a hybrid of a Python script and a layout template, which both operate in a top to bottom way. Objects are usually meant to be defined in a certain location or context and interacted with multiple times during the course of a program. This is exactly what we want to do here; we intend to create a Research Engine and use it to find research papers during the course of a single session. . There are two main objects in our design: ResearchPapers and Paper. The ResearchPapers class will load and maintain the list of research papers, while Paper will allow us to work with a single research paper. . class ResearchPapers: def __init__(self, metadata, data_dir=&#39;data&#39;): pass class Paper: def __init__(self): pass . Loading Research Papers . We start with the metadata.csv since this contains the master list of all the research papers and important information about each paper. Some Kaggle kernels started by loading the research papers from the JSON files, but the metadata is considerably smaller, and starting with the metadata might allow us to only load a research paper from a JSON file if required, thereby saving significantly on computational resources. . Load Metadata . The load_metadata function is straightforward - it uses pandas.read_csv() to load the metadata.csv file. Along the way it changes the data types for the Microsoft Academic Paper ID and _pubmedid columns. It also renames a couple of columns, which is optional, and only to make browsing the data a little easier. . @staticmethod def load_metadata(data_path=None): if not data_path: data_path = find_data_dir() print(&#39;Loading metadata from&#39;, data_path) metadata_path = PurePath(data_path) / &#39;metadata.csv&#39; dtypes = {&#39;Microsoft Academic Paper ID&#39;: &#39;str&#39;, &#39;pubmed_id&#39;: str} renames = {&#39;source_x&#39;: &#39;source&#39;, &#39;has_full_text&#39;: &#39;has_text&#39;} # Load the metadata using read.csv metadata = pd.read_csv(metadata_path, dtype=dtypes, low_memory=False, parse_dates=[&#39;publish_time&#39;]).rename(columns=renames) metadata = clean_metadata(metadata) return metadata . Within load_metadata we call clean_metadata. This function is a data cleaning pipeline that fixes some of the issues with the Kaggle data by using a pipeline of data cleaning functions. Notice that each function is specfic to a task, and named specifically for that task, which makes it simple to remove or add cleaning functions. This is important since a new version of the CORD research data is released every week, with new data fixes, so if you can quickly modify your data pipeline, it gives you an advantage. . Clean Metadata . def clean_metadata(metadata): print(&#39;Cleaning metadata&#39;) return metadata.pipe(start) .pipe(clean_title) .pipe(clean_abstract) .pipe(rename_publish_time) .pipe(add_date_diff) .pipe(drop_missing) .pipe(fill_nulls) .pipe(apply_tags) . Each function in the clean_metadata pipeline accepts a dataframe and returns the dataframe after modification. The functions are connected by the pandas dataframe pipe function, which is designed for this use case of connecting functions sequentially. At the start of the pipeline is a special function called start which is defined as: . def start(data): return data.copy() . This returns a copy of the data at the start of a data pipeline. This is very important; it makes sure that the initial data is unchanged and enables you to rerun your notebook from any point without worrying that your data has changed in a way that breaks it. This is a pattern I learned from the presentation Untitled12.ipynb by Vincent D Warmerdam at PyData Eindhoven 2019 . Each subsequent function in the pipeline accepts a dataframe and returns a dataframe. Here is clean_title: . def clean_title(data): # Set junk titles to &#39;&#39; title_relevant = data.title.fillna(&#39;&#39;).str.match(_relevant_re_, case=False) title_short = data.title.fillna(&#39;&#39;).apply(len) &lt; 30 title_junk = title_short &amp; ~title_relevant data.loc[title_junk, &#39;title&#39;] = &#39;&#39; return data . Load function . After loading the metadata, we have the load function. This is the static function on the ResearchPapers class that actually creates the ResearchPapers instance using ResearchPapers.load(). . @classmethod def load(cls, index=None): data_path = find_data_dir() metadata = cls.load_metadata(data_path) return cls(metadata, data_path, index=index) . Preprocessing . While the clean_metadata function does some text preprocessing, it does that in relation to the metadata.csv file that is released by Kaggle to remove any data issues it might have. We still need to do text preprocessing to prepare the text of the research papers for storing in the search and similarity indexes. Text preprocessing is a necessary part of NLP projects, and, despite the fact that there are a lot of utilities available in NLP libraries to preprocess test, it is still part of the art of being an NLP practictioner. For example, the regex below was hand-crafted with input from Google searches, and a lot of trial and error. I found, for example, that the text prepeocessing that came with gensim was hand-rolled. You may or may not need to follow a similar process for your own text preprocessing, depending on your judgement. . TOKEN_PATTERN = re.compile(&#39;^(20|19) d{2}|(?=[A-Z])[ w - d]+$&#39;, re.IGNORECASE) def replace_punctuation(text): t = re.sub(&#39; (| )|:|,|;| .|’|”|“| ?|%|&gt;|&lt;|≥|≤|~|`&#39;, &#39;&#39;, text) t = re.sub(&#39;/&#39;, &#39; &#39;, t) t = t.replace(&quot;&#39;&quot;, &#39;&#39;) return t def clean(text): t = text.lower() t = replace_punctuation(t) return t def tokenize(text): words = nltk.word_tokenize(text) return [word for word in words if len(word) &gt; 1 and not word in SIMPLE_STOPWORDS and TOKEN_PATTERN.match(word) ] def preprocess(text): t = clean(text) tokens = tokenize(t) return tokens . The preprocess function . Regardless, every NLP project requires a preprocess or equivalent function. Our preprocess function converts the text to lowercase, removes punctuation, and converts the text to tokens. What is very important is that the identical preprocess function be used when preparing the text in batch mode as when using it in query mode. So the preprocess function will be used again on each search query to match accurately against what is stored in the index. . Utility Functions . Parallel Processing . As of the May 2nd data release the CORD Research Paper dataset was over 8GB in size, with more than 59,000 metadata records and well over 60,000 research papers on disk. In order to process the data in a reasonable amount of time, we added a utility function that will run a given function on a list of data using as many cores that are available. . def parallel(func, arr: Collection, max_workers: int = None, leave=False): &quot;Call `func` on every element of `arr` in parallel using `max_workers`.&quot; max_workers = ifnone(max_workers, multiprocessing.cpu_count()) progress_bar = tqdm(arr) with ThreadPoolExecutor(max_workers=max_workers) as ex: futures_to_index = {ex.submit(func, o): i for i, o in enumerate(arr)} results = [] for f in as_completed(futures_to_index): results.append((futures_to_index[f], f.result())) progress_bar.update() for n in range(progress_bar.n, progress_bar.total): time.sleep(0.1) progress_bar.update() results.sort(key=lambda x: x[0]) return [result for i, result in results] . For example, if we have a list of JSON files and we want to convert that to a ist of tokenized text we can do: . def get_tokens(cord_path): cord_uid, path = cord_path if isinstance(path, Path): tokens = preprocess(load_text(path)) return cord_uid, tokens return cord_uid, np.nan cord_tokens = parallel(get_tokens, cord_paths) . Reading and tokenizing each of the over 60,000 JSON files is a very expensive operation, so we want to distribute this load across our CPU cores. . Describe the Metadata . The pandas function describe can be used to gather information about series and dataframes. . This is what describe shows when you use it on the metadata without doing any special type of conversions. . import pandas as pd metadata = pd.read_csv(PurePath(data_path) / &#39;metadata.csv&#39;) metadata.describe() . pubmed_id Microsoft Academic Paper ID . count 1.404000e+03 | 3.600000e+01 | . mean 2.214187e+07 | 2.706621e+09 | . std 7.717728e+06 | 4.306890e+08 | . min 2.700200e+04 | 1.559092e+09 | . 25% 1.726375e+07 | 2.315523e+09 | . 50% 2.375861e+07 | 3.003704e+09 | . 75% 2.839937e+07 | 3.004938e+09 | . max 3.230300e+07 | 3.006646e+09 | . It is a bit limiting, so we will write a function that provides more information than what is available using describe. . from cord.core import describe_dataframe describe_dataframe(metadata); . ResearchPapers init . Now we are at ResearchPapers.__init__(). The ResearchPapers instance is constructed with a metadata dataframe, which is the dataframe we parsed in load_metadata. A ResearchPapers instance can also be constructed with a subset of the metadata, meaning that we can create an instance containing only COVID-19 related papers, or papers published by Elsevier or any other subset of the metadata that we are interested in. We will show how to use this functionality later. . We can construct the BM25 index from the papers referenced by the metadata. Each metadata row has an abstract column, which contains the abstract of the research paper, which we can preprocess into the index tokens needed by the index. We can, alternatively, create the index tokens from the full text content of the paper, which we load from disk. The full text content gives the potential for a more accurate search, with the tradeoff that it takes a much longer time to build the index. To enable this tradeoff, the load function accepts a parameter index, which deteremines which index strategy to use. ResearchPapers.load(index=&quot;text&quot;) loaded and indexed from the JSON file contents, while ResearchPapers.load(index&quot;abstract&quot;) used the metadata abstract. On a Kaggle instance it took approximately 100 seconds to index from the abstracts versus over 2,000 seconds to index from the JSON texts, though it was about three times faster for each operation on my local laptop. . To save on the time to load from the JSON texts the CORD library, JSON index tokens were processed offline and saved to parquet files. These parquet files were then loaded whenever the option index=&quot;text&quot; was selected. . def __init__(self, metadata, data_dir=&#39;data&#39;, index=&#39;abstract&#39;, view=&#39;html&#39;): self.data_path = Path(data_dir) self.num_results = 10 self.view = view self.metadata = metadata if &#39;index_tokens&#39; not in metadata: print(&#39; nIndexing research papers&#39;) if any([index == t for t in [&#39;text&#39;, &#39;texts&#39;, &#39;content&#39;, &#39;contents&#39;]]): tick = time.time() _set_index_from_text(self.metadata, data_dir) print(&quot;Finished indexing in&quot;, int(time.time() - tick), &#39;seconds&#39;) else: print(&#39;Creating the BM25 index from the abstracts of the papers&#39;) print(&#39;Use index=&quot;text&quot; if you want to index the texts of the paper instead&#39;) tick = time.time() self.metadata[&#39;index_tokens&#39;] = metadata.abstract.apply(preprocess) tock = time.time() print(&#39;Finished Indexing in&#39;, round(tock - tick, 0), &#39;seconds&#39;) # Create BM25 search index self.bm25 = _get_bm25Okapi(self.metadata.index_tokens) . Python Objects wrapping dataframes . A pattern that is repeated throughout the project is to have a dataframe as a member of a python object. The python object controls access to the dataframe and provides useful functionality, while the dataframe acts as a local database. There are many use cases that fit this pattern where you load read-only data into a dataframe and wrap python code around it. In our case the ResearchPapers class acts like a miniature application that accesses a local in-memory database. We also do this with the SearchResults object, which wraps a dataframe of the search results. . The most important line above self.metadata = metadata sets the dataframe as an instance member. The primary use is to load all the research papers from the metadata.csv, in which case we will have all 50,000+ research papers. Note that we can pass a metadata dataframe of any number of records, meaning that we can make subsets of ResearchPapers. This enables the ability to select only a subset of research papers, e.g. source==&quot;Elsevier&quot;, then make a copy of the ResearchPapers with the smaller number of records. . def query(self, query): data = self.metadata.query(query) return self._make_copy(data) def _make_copy(self, new_data): return ResearchPapers(metadata=new_data.copy(), data_dir=self.data_path, view=self.view) . We will see how this pattern is used in more detail later in the notebook. . Indexing Research Papers . Now that we have completed our basic code, we can see the load in action. We will start with loading from the abstracts. . from cord import ResearchPapers . Indexing from Abstracts . papers = ResearchPapers.load() . Loading metadata from data CORD-19-research-challenge Cleaning metadata Applying tags to metadata Indexing research papers Creating the BM25 index from the abstracts of the papers Use index=&#34;text&#34; if you want to index the texts of the paper instead Finished Indexing in 1.0 seconds . Indexing from Texts . papers = ResearchPapers.load(index=&#39;text&#39;) . Loading metadata from data CORD-19-research-challenge Cleaning metadata Applying tags to metadata Indexing research papers Creating the BM25 index from the text contents of the papers There are 2006 papers that will be indexed using the abstract instead of the contents Finished indexing in 30 seconds . Viewing the Research Papers . papers . CORD 19 Research Papers . Papers Oldest Newest SARS-COV-2 SARS Coronavirus Virus Antivirals . 2006 | 1967-03-31 | 2020-12-31 | 227 | 134 | 384 | 1133 | 17 | . . title abstract journal authors published when . 0 A model of tripeptidyl-peptidase I (CLN2), a u... | : Tripeptidyl-peptidase I, also known as CLN2,... | BMC Struct Biol | Wlodawer, Alexander; Durell, Stewart R; Li, Mi... | 2003-11-11 | 16 years ago | . 1 SARS and hospital priority setting: a qualitat... | : Priority setting is one of the most difficul... | BMC Health Serv Res | Bell, Jennifer AH; Hyland, Sylvia; DePellegrin... | 2004-12-19 | 15 years ago | . 2 Trade and Health: Is the Health Community Read... | There are greater tensions than ever before be... | PLoS Med | Lee, Kelley; Koivusalo, Meri | 2005-01-25 | 15 years ago | . 3 Reference gene selection for quantitative real... | Ten potential reference genes were compared fo... | Virol J | Radonić, Aleksandar; Thulke, Stefanie; Bae, Hi... | 2005-02-10 | 15 years ago | . 4 Australia&#39;s international health relations in ... | A survey for the year 2003 of significant deve... | Aust New Zealand Health Policy | Barraclough, Simon | 2005-02-21 | 15 years ago | . ... ... | ... | ... | ... | ... | ... | . 2001 Chloroquine : pas d’efficacité sur le virus Ebola | Chloroquine : pas d’efficacité sur le virus Ebola | Revue Francophone des Laboratoires | | 2015-11-30 | 4 years ago | . 2002 Multiplex PCR tests sentinel the appearance of... | Background Since the turn of the century seve... | Journal of Clinical Virology | Mahony, James B.; Hatchette, Todd; Ojkic, Davo... | 2009-07-31 | 11 years ago | . 2003 Identification of a New Antizyme mRNA +1 Frame... | The expression of eukaryotic antizyme genes r... | Journal of Molecular Biology | Ivanov, Ivaylo P; Anderson, Christine B; Geste... | 2004-06-04 | 16 years ago | . 2004 Antiviral responses against chicken respirator... | Some of the respiratory viral infections in c... | Cytokine | Barjesteh, Neda; O&#39;Dowd, Kelsey; Vahedi, Seyed... | 2020-03-31 | 1 month ago | . 2005 Biochemical evidence for the presence of mixed... | Coronavirus envelope (E) protein is a small i... | FEBS Letters | Yuan, Q.; Liao, Y.; Torres, J.; Tam, J.P.; Liu... | 2006-05-29 | 14 years ago | . 2006 rows × 6 columns . The Search Index . The search index is built on a BM25 Okapi libray called _rankbm25. . An implementation of BM25 is also available in gensim, but I found _rankbm25 was simple to implement. . rank_bm25 | Dorian Brown (author of rank_bm25) | . What is BM25 Okapi? . BM25 stands for Best Match the 25th version and is a text search algorithm first developed in 1994. Okapi stands for the Okapi information retrieval system, implemented at London&#39;s City University in the 1980s and 1990s on which BM25 was used. . It is one of the best search algorithms available, and Lucene and its derivatives, Solr and ElasticSearch switched to a BM25 variant around 2015. . Creating the BM25 Index . The heart of this notebook, the one forked over 400 times on Kaggle, is this line of code. . BM25Okapi(index_tokens.tolist()) . This creates a new BM25Okapi index on the index_tokens. The index accepts a list of tokens, with each item in the list representing a single tokenized research paper. This is as simple as you can get for a bit of technology that is also used in ElasticSearch software. . The actual implementation in the library is just slightly more complicated, accounting for the edge case of creating a ResearchPapers instance with no papers inside. (This can happen, as we see below, if our API is so flexible that it allows a user to do this). . from rank_bm25 import BM25Okapi def _get_bm25Okapi(index_tokens): has_tokens = index_tokens.apply(len).sum() &gt; 0 if not has_tokens: index_tokens.loc[0] = [&#39;no&#39;, &#39;tokens&#39;] return BM25Okapi(index_tokens.tolist()) . Searching Papers . The search function is defined below. We preprocess the search string and then get the doc_scores (the search relevance score) from the BM25 index for all documents in the index. Then we get the dataframe locations of the most relevant papers, do some additional filtering, then return the top n results. . def search(self, search_string, num_results=10, covid_related=False, start_date=None, end_date=None, view=&#39;html&#39;): n_results = num_results or self.num_results # Preprocess the search string search_terms = preprocess(search_string) # Get the doc scores from the BM25 index doc_scores = self.bm25.get_scores(search_terms) # Get the index from the doc scores sorted by most relevant ind = np.argsort(doc_scores)[::-1] # Sort the metadata using the sorted index above results = self.metadata.iloc[ind].copy() # Round the doc scores, in case we use the score in the display results[&#39;Score&#39;] = doc_scores[ind].round(1) # Filter covid related if covid_related: results = results[results.covid_related] # Filter by dates - start date if start_date: results = results[results.published &gt;= start_date] # end data if end_date: results = results[results.published &lt; end_date] # Show only up to n_results results = results.head(num_results) # Create the final results results = results.drop_duplicates(subset=[&#39;title&#39;]) # Return Search Results return SearchResults(results, self.data_path, view=view) . Here is the code run outside of the function, with print statements . from cord.text import preprocess import numpy as np search_query = &#39;Mother to child transmission&#39; search_tokens = preprocess(search_query) print(&#39;search_tokens&#39;, search_tokens) doc_scores = papers.bm25.get_scores(search_tokens) print(&#39;doc_scores&#39;, doc_scores) ind = np.argsort(doc_scores)[::-1] print(&#39;ind&#39;, ind) . search_tokens [&#39;mother&#39;, &#39;child&#39;, &#39;transmission&#39;] doc_scores [0. 0. 0. ... 0. 0. 0.] ind [1451 1543 82 ... 1320 1322 0] . The Similarity Index . Included with the CORD-19 Research Dataset is a CSV file containing the document embeddings vectors for the papers in the dataset. Each vector is a 768-dimension vector representing what a neural network has learned about that research paper, and, effectively, it is a signature or a fingerprint of that research paper. This vector can be used to build our similarity index and allow us to find similar papers for any given research paper. . . The embeddings CSV file is large—over 700MB in the real dataset. For this notebook we have created a smaller CSV file with only the embeddings for the research papers included with the notebook. If you load and look at the embeddings, you will see 769 columns, one for each of the 768-dimension vector, plus the cord_uid. (The cord_uid is the unique identifier for a research paper in the dataset.) . embeddings_path = data_path / &#39;cord_19_embeddings.csv&#39; embeddings = pd.read_csv(embeddings_path) display(embeddings.shape) ## Look at the first 2 rows and 5 columns embeddings.iloc[:2, :5] . (1824, 769) . 5o38ihe0 -5.601012229919434 -4.197016716003418 2.3068416118621826 5.485584259033203 . 0 xvi5miqw | -1.932757 | -4.252481 | -4.315052 | 4.177907 | . 1 zl5lgcog | 2.447766 | -2.379109 | -0.537503 | 4.555745 | . Let us load the data again, but this time add the column names . VECTOR_COLS = [str(i) for i in range(768)] COLUMNS = [&#39;cord_uid&#39;] + VECTOR_COLS embeddings = pd.read_csv(embeddings_path, names=COLUMNS).set_index(&#39;cord_uid&#39;) print(&#39;Loaded embeddings of shape&#39;, embeddings.shape) ## Look at the first 2 rows and 5 columns embeddings.iloc[:2, :5] . Loaded embeddings of shape (1825, 768) . 0 1 2 3 4 . cord_uid . 5o38ihe0 -5.601012 | -4.197017 | 2.306842 | 5.485584 | 3.822709 | . xvi5miqw -1.932757 | -4.252481 | -4.315052 | 4.177907 | -3.749875 | . Building the Annoy Index . Annoy is a library for building an index of vectors so that the nearest neighbors to that vector can be easily found. This library is used at Spotify to find music recommendations, so it is one of the best technologies we can possibly use to find similar papers. . To build an annoy index, you first create it with the vector size that you want to store in the index, then add each vector to the index, then build. . from annoy import AnnoyIndex import random VECTOR_SIZE = 40 annoy_index = AnnoyIndex(VECTOR_SIZE, &#39;angular&#39;) # Length of item vector that will be indexed for i, vector in enumerate(vectors): annoy_index.add_item(i, vector) annoy_index.build(10) # 10 trees annoy_index.save(&#39;test.ann&#39;) . Reduce Vector Dimensions . For the index we wanted to create, we thought 768 dimensions was too much, especially since it meant that the resulting index would be very large on disk, and also too large to fit into a Git repository. Therefore we used PCA to reduce the dimensions to 192, and those 192 dimensional vectors are stored in the Annoy Index. . from sklearn.decomposition import PCA def downsample(docvectors, dimensions=2): print(f&#39;Downsampling to {dimensions}D embeddings&#39;) pca = PCA(n_components=dimensions, svd_solver=&#39;full&#39;) docvectors_downsampled = pca.fit_transform(docvectors) return np.squeeze(docvectors_downsampled), pca . Getting Similar Vectors . Once we have the annoy index, we use it to find similar papers using the similar papers function. Annoy has two functions for finding similar papers: get_nns_by_item and get_nns_by_vector. In our function we use get_nns_by_item. . def similar_papers(paper_id, num_items=config.num_similar_items): from .vectors import SPECTOR_SIMILARITY_INDEX index = paper_id if isinstance(paper_id, int) else get_index(paper_id) if not index: return [] similar_indexes = SPECTOR_SIMILARITY_INDEX.get_nns_by_item(index, num_items, search_k=config.search_k) similar_cord_uids = document_vectors.iloc[similar_indexes].index.values.tolist() return [id for id in similar_cord_uids if not id == paper_id] . Displaying objects in a notebook . In the search function we returned a SearchResults object that contained a dataframe with the search results. This is a common pattern used in the notebook—often a dataframe is wrapped inside of an object. . The reason for this pattern is to control how the dataframe is displayed in the notebook. For the search result, we want to present a different formatting from what is available for dataframes, and we may also want to control which columns are displayed, or other aspects of the search results. . Outputting HTML . Objects can control how they are displayed as HTML in a Jupyter notebook by implementing the _repr_html_() function. Some of the objects that we create in this project are meant to wrap a dataframe and control how they are displayed. SearchResults is one such object—it wraps the results dataframe and controls how it looks using _repr_html_(). SearchResults can actually be viewed as a dataframe . papers.search(&#39;Mother to child&#39;, covid_related=True, num_results=4, view=&#39;df&#39;) . title summary when . 1451 Investigation on demands for antenatal care se... | Objective To identify problems and demands for... | 4 months ago | . 664 Lessons learned from Korea: COVID-19 pandemic | Lessons learned from Korea: COVID-19 pandemic | 1 month ago | . 642 Editorial. Impact of COVID-19 on neurosurgery ... | Editorial. Impact of COVID-19 on neurosurgery ... | 3 weeks ago | . 643 Editorial. Innovations in neurosurgical educat... | Editorial. Innovations in neurosurgical educat... | 3 weeks ago | . or an HTML table: . papers.search(&#39;Mother to child&#39;, covid_related=True, num_results=2) . Investigation on demands for antenatal care services among 2 002 pregnant women during the epidemic of coronavirus disease 2019 in Shanghai . 4 months ago Link ndbc4kga Objective To identify problems and demands for antenatal care (ANC) among pregnant women in different trimesters of pregnancy in Shanghai for optimizing ANC service during the epidemic of coronavirus disease 2019 (COVID-19). Methods Organized by Maternal and Child Health Care institute in the 16 districts of Shanghai, a cross sectional study was conducted among pregnant women who came to pregnancy registration in the community health centers or attended ANC in maternity hospitals from February 7... DU, Li; GU, Yibin; CUI, Mengqing; LI, Wenxian; WANG, Jie; ZHU, Liping; XU, Biao Lessons learned from Korea: COVID-19 pandemic . 1 month ago Link w0ud098l Lessons learned from Korea: COVID-19 pandemic Moradi, Hazhir; Vaezi, Atefeh Integrating your object with IPython . Using the Dataframe style function . Another great way to customize the look of a dataframe inside a notebook is to use the dataframe.style function. This pandas functionality is pretty powerful and can allow you to completely change how a dataframe is displayed in a notebook. . In the CORD library we wanted to style the results differently from regular dataframes, to improve on the look and feel, and to have the library stand out from the competition. The code below shows how the display function used the style function to change the styling of the results. . def display(self, *paper_ids): # Look up the papers using the paperids and create a dataframe _recs = [] for id in paper_ids: paper = self[id] _recs.append({&#39;published&#39;: paper.metadata.published, &#39;title&#39;: paper.title, &#39;summary&#39;: paper.summary, &#39;when&#39;: paper.metadata.when, &#39;cord_uid&#39;: paper.cord_uid}) df = pd.DataFrame(_recs).sort_values([&#39;published&#39;], ascending=False).drop(columns=[&#39;published&#39;]) # Apply a style to a column def highlight_cols(s): return &#39;font-size: 1.1em; color: #008B8B; font-weight: bold&#39; # Apply the style above to the title column of the dataframe and hide the index return df.style.applymap(highlight_cols, subset=pd.IndexSlice[:, [&#39;title&#39;]]).hide_index() . This is how the results are dispayed in the notebook: . papers.display(&#39;v3lbrzh8&#39;) . title summary when cord_uid . Biochemical evidence for the presence of mixed membrane topologies of the severe acute respiratory syndrome coronavirus envelope protein expressed in mammalian cells | Different coronavirus E proteins share striking similarities in biochemical properties and biological functions, but seem to adopt distinct membrane topology. In this report, we study the membrane topology of the SARS-CoV E protein by immunofluorescent staining of cells differentially permeabilized with detergents and proteinase K protection assay. It was revealed that both the N- and C-termini of the SARS-CoV E protein are exposed to the cytoplasmic side of the membranes (NcytoCcyto). Intriguingly, a minor proportion of the SARS-CoV E protein was found to be modified by N-linked glycosylation on Asn 66 and inserted into the membranes once with the C-terminus exposed to the luminal side. The presence of two distinct membrane topologies of the SARS-CoV E protein may provide a useful clue to the pathogenesis of SARS-CoV. | 14 years ago | v3lbrzh8 | . For more information on styling dataframes see Pandas Styling. . Creating Search Widgets . To create interactivity within the notebook, and to allow the user to perform interactive searches, we use ipywidgets. . Search Date Slider . This widget displays a slider that allows a user to select relevant dates for the Research paper search: . def SearchDatesSlider(): options = [(&#39; 1951 &#39;, &#39;1951-01-01&#39;), (&#39; SARS 2003 &#39;, &#39;2002-11-01&#39;), (&#39; H1N1 2009 &#39;, &#39;2009-04-01&#39;), (&#39; COVID 19 &#39;, &#39;2019-11-30&#39;), (&#39; 2020 &#39;, &#39;2020-12-31&#39;)] return widgets.SelectionRangeSlider( options=options, description=&#39;Dates&#39;, disabled=False, value=(&#39;2002-11-01&#39;, &#39;2020-12-31&#39;), layout={&#39;width&#39;: &#39;480px&#39;} ) . SearchBar . For the search bar we add a Text, Button, Checkbox and use HBox and VBox for layout. . def searchbar(self, initial_search_terms=&#39;&#39;, num_results=10, view=None): text_input = widgets.Text(layout=widgets.Layout(width=&#39;400px&#39;), value=initial_search_terms) search_button = widgets.Button(description=&#39;Search&#39;, button_style=&#39;primary&#39;, layout=widgets.Layout(width=&#39;100px&#39;)) search_box = widgets.HBox(children=[text_input, search_button]) # A COVID-related checkbox covid_related_CheckBox = widgets.Checkbox(description=&#39;Covid-19 related&#39;, value=False, disable=False) checkboxes = widgets.HBox(children=[covid_related_CheckBox]) # A date slider to limit research papers to a date range search_dates_slider = SearchDatesSlider() search_widget = widgets.VBox([search_box, search_dates_slider, checkboxes]) output = widgets.Output() def do_search(): search_terms = text_input.value.strip() if search_terms and len(search_terms) &gt;= 4: start_date, end_date = search_dates_slider.value self._search_papers(output=output, SearchTerms=search_terms, num_results=num_results, view=view, start_date=start_date, end_date=end_date, covid_related=covid_related_CheckBox.value) def button_search_handler(btn): with output: clear_output() do_search() def text_search_handler(change): if len(change[&#39;new&#39;].split(&#39; &#39;)) != len(change[&#39;old&#39;].split(&#39; &#39;)): do_search() def date_handler(change): do_search() def checkbox_handler(change): do_search() search_button.on_click(button_search_handler) text_input.observe(text_search_handler, names=&#39;value&#39;) search_dates_slider.observe(date_handler, names=&#39;value&#39;) covid_related_CheckBox.observe(checkbox_handler, names=&#39;value&#39;) display(search_widget) display(output) # Show the initial terms if initial_search_terms: do_search() . Now we can see the search bar in action. It updates as you change the selections in the form . papers.searchbar(&#39;Cruise ship&#39;, num_results=4) . . Subsetting Research Papers . There are many ways to select subsets of research papers including: . Papers since SARS research_papers.since_sars() | Papers since SARS-COV-2 research_papers.since_sarscov2() | Papers before SARS research_papers.before_sars() | Papers before SARS-COV-2 research_papers.before_sarscov2() | Papers before a date research_papers.before(&#39;1989-09-12&#39;) | Papers after a date research_papers.after(&#39;1989-09-12&#39;) | Papers that contains a string | Papers that match a string (using regex) | . Papers published since SARS-COV-2 . papers.since_sarscov2() . CORD 19 Research Papers . Papers Oldest Newest SARS-COV-2 SARS Coronavirus Virus Antivirals . 316 | 2019-11-30 | 2020-12-31 | 227 | 1 | 130 | 176 | 5 | . . title abstract journal authors published when . 449 Focusing on Families and Visitors Reduces Heal... | Healthcare-associated respiratory viral infect... | Pediatr Qual Saf | Linam, W. Matthew; Marrero, Elizabeth M.; Hone... | 2019-12-16 | 4 months ago | . 452 Willingness to Self-Isolate When Facing a Pand... | Infected people are isolated to minimize the s... | Int J Environ Res Public Health | Zhang, Xiaojun; Wang, Fanfan; Zhu, Changwen; W... | 2019-12-27 | 4 months ago | . 453 Causes of fever in Gabonese children: a cross-... | The causes of infections in pediatric populati... | Sci Rep | Fernandes, José Francisco; Held, Jana; Dorn, M... | 2020-02-07 | 3 months ago | . 454 Loop-Mediated Isothermal Amplification (LAMP) ... | The recent outbreak of Zika virus (ZIKV) in th... | Viruses | da Silva, Severino Jefferson Ribeiro; Pardee, ... | 2019-12-23 | 4 months ago | . 455 Innate Immunity and Pathogenesis of Biliary At... | Biliary atresia (BA) is a devastating fibro-in... | Front Immunol | Ortiz-Perez, Ana; Donnelly, Bryan; Temple, Hal... | 2020-02-25 | 2 months ago | . ... ... | ... | ... | ... | ... | ... | . 1978 MERS-CoV as an emerging respiratory illness: A... | Introduction Middle East Respiratory Coronavi... | Travel Medicine and Infectious Disease | Baharoon, Salim; Memish, Ziad A. | 2019-12-31 | 4 months ago | . 1980 Mass gathering events and reducing further glo... | Mass gathering events and reducing further glo... | The Lancet | McCloskey, Brian; Zumla, Alimuddin; Ippolito, ... | 2020-04-10 | 4 weeks ago | . 1992 New insights on the antiviral effects of chlor... | ABSTRACT Recently, a novel coronavirus (2019-n... | International Journal of Antimicrobial Agents | Devaux, Christian A.; Rolain, Jean-Marc; Colso... | 2020-03-12 | 1 month ago | . 1993 A British Society of Thoracic Imaging statemen... | A British Society of Thoracic Imaging statemen... | Clinical Radiology | Nair, A.; Rodrigues, J.C.L.; Hare, S.; Edey, A... | 2020-05-31 | in 3 weeks | . 2004 Antiviral responses against chicken respirator... | Some of the respiratory viral infections in c... | Cytokine | Barjesteh, Neda; O&#39;Dowd, Kelsey; Vahedi, Seyed... | 2020-03-31 | 1 month ago | . 316 rows × 6 columns . Papers with &quot;bats&quot; in the title . papers.contains(&#39;bats&#39;, column=&#39;title&#39;) . CORD 19 Research Papers . Papers Oldest Newest SARS-COV-2 SARS Coronavirus Virus Antivirals . 3 | 2010-08-15 | 2019-02-10 | 0 | 0 | 0 | 2 | 0 | . . title abstract journal authors published when . 292 Prevalence, diversity, and host associations o... | Bartonella infections were investigated in sev... | PLoS Negl Trop Dis | Urushadze, Lela; Bai, Ying; Osikowicz, Lynn; M... | 2017-04-11 | 3 years ago | . 475 Detection of adenovirus, papillomavirus and pa... | Bats play a significant role in maintaining th... | Arch Virol | Finoketti, Fernando; dos Santos, Raíssa Nunes;... | 2019-02-10 | 1 year ago | . 1859 Identification and complete genome analysis of... | Among 489 bats of 11 species in China, three ... | Virology | Lau, Susanna K.P.; Woo, Patrick C.Y.; Wong, Be... | 2010-08-15 | 10 years ago | . Papers with Brian Mcloskey as an author . papers.match(&#39;.*McCloskey, B&#39;, column=&#39;authors&#39;) . CORD 19 Research Papers . Papers Oldest Newest SARS-COV-2 SARS Coronavirus Virus Antivirals . 2 | 2017-09-30 | 2020-04-10 | 1 | 0 | 0 | 1 | 0 | . . title abstract journal authors published when . 1552 The rise of Zika infection and microcephaly: w... | Objectives To consider why Zika was declared ... | Public Health | McCloskey, B.; Endericks, T. | 2017-09-30 | 3 years ago | . 1980 Mass gathering events and reducing further glo... | Mass gathering events and reducing further glo... | The Lancet | McCloskey, Brian; Zumla, Alimuddin; Ippolito, ... | 2020-04-10 | 4 weeks ago | . Getting a single research paper . The ResearchPapers class implements __get_item__() so a single ResearchPaper can be accessed using the numeric index of the paper as in: . papers[0] . A model of tripeptidyl-peptidase I (CLN2), a ubiquitous and highly conserved member of the sedolisin family of serine-carboxyl peptidases . published authors cord_uid url . 2003-11-11 | Wlodawer, Alexander; Durell, Stewart R; Li, Mi... | 5o38ihe0 | https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2... | . Summary . : Tripeptidyl-peptidase I, also known as CLN2, is a member of the family of sedolisins (serine-carboxyl peptidases). Similar enzymes have been found in the genomic sequences of several species, but neither systematic analyses of their distribution nor modeling of their structures have been previously attempted. RESULTS: We have analyzed the presence of orthologs of human CLN2 in the genomic sequences of a number of eukaryotic species. Enzymes with sequences sharing over 80% identity have been found in the genomes of macaque, mouse, rat, dog, and cow. A three-dimensional model of human CLN2 was built based mainly on the homology with Pseudomonas sp. The model presented here indicates a very open and accessible active site that is almost completely conserved among all known CLN2 enzymes. It&#39;s preferable to access a paper using the cord_uid since it is a stable identifier. papers[&quot;5o38ihe0&quot;] referes to the same research paper . papers[&#39;5o38ihe0&#39;] . A model of tripeptidyl-peptidase I (CLN2), a ubiquitous and highly conserved member of the sedolisin family of serine-carboxyl peptidases . published authors cord_uid url . 2003-11-11 | Wlodawer, Alexander; Durell, Stewart R; Li, Mi... | 5o38ihe0 | https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2... | . Summary . : Tripeptidyl-peptidase I, also known as CLN2, is a member of the family of sedolisins (serine-carboxyl peptidases). Similar enzymes have been found in the genomic sequences of several species, but neither systematic analyses of their distribution nor modeling of their structures have been previously attempted. RESULTS: We have analyzed the presence of orthologs of human CLN2 in the genomic sequences of a number of eukaryotic species. Enzymes with sequences sharing over 80% identity have been found in the genomes of macaque, mouse, rat, dog, and cow. A three-dimensional model of human CLN2 was built based mainly on the homology with Pseudomonas sp. The model presented here indicates a very open and accessible active site that is almost completely conserved among all known CLN2 enzymes. Implementing getitem . The implementation of __getitem__() is simple: . def __getitem__(self, item): if isinstance(item, int): paper = self.metadata.iloc[item] else: paper = self.metadata[self.metadata.cord_uid == item] . The main view of a research paper is the overview, as shown above. This shows a formatted collection of the paper&#39;s important fields. There are other views or attributes of research papers, including: . Overview: A nicely formatted view of the paper&#39;s important fields | Abstract: The paper&#39;s abstract | Summary: A summary of the paper&#39;s abstract using the TextRank algorithm | Text: The text in the paper | HTML: The contents of the paper as somewhat nicely formatted HTML | Text Summary: The text of the paper, summarized using the TextRank algorithm | . This is implemented in the following function: . paper = research_papers[&#39;asf5c7xu&#39;] def view_paper(ViewPaperAs): if ViewPaperAs == &#39;Overview&#39;: display(paper) elif ViewPaperAs == &#39;Abstract&#39;: display(paper.abstract) elif ViewPaperAs == &#39;Summary of Abstract&#39;: display(paper.summary) elif ViewPaperAs == &#39;HTML&#39;: display(paper.html) elif ViewPaperAs == &#39;Text&#39;: display(paper.text) elif ViewPaperAs == &#39;Summary of Text&#39;: display(paper.text_summary) interact(view_paper, ViewPaperAs=[&#39;Overview&#39;, # Show an overview of the paper&#39;s important fields and statistics &#39;Abstract&#39;, # Show the paper&#39;s abstract &#39;Summary of Abstract&#39;, # Show a summary of the paper&#39;s abstract &#39;HTML&#39;, # Show the paper&#39;s contents as (slightly) formatted HTML &#39;Text&#39;, # Show the paper&#39;s contents &#39;Summary of Text&#39; # Show a summary of the paper&#39;s content ] ); . Conclusion . In this notebook we showed you how to use search and NLP techniques to build a simple search engine and UI over a set of documents. Hopefully, it can help you create your own solution if you are interested in contributing to the same CORD research paper dataset. However, the code and techniques learned here can be applied to other use cases, so feel free to adapt it to your own purposes. . . References . CORD-19 Research Paper Challenge on Kaggle | CORD library on Github | .",
            "url": "https://dgunning.github.io/blog/notebooks/covid19/2020/05/08/building-a-covid19-research-engine.html",
            "relUrl": "/notebooks/covid19/2020/05/08/building-a-covid19-research-engine.html",
            "date": " • May 8, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Estimating COVID-19's Rt in Real-Time for Canada",
            "content": ". In The Metric We Need to Manage COVID-19, Kevin Systrom, who co-founded Instagram, wrote about $R_t$, a measure of the effective reproductive rate for COVID-19. You might have heard about R0 - the base reproductive rate, which is measure how many secondary infections are produced by a single primary infection. If R0 is greater that 1, the disease spreads, while if it is less than 1, it will eventually peter out. . $R_t$ is an improvement over R0, since it changes in response to health interventions, which makes it a metric we can actually track to see how well we are doing. The techniques for calculating it are based on Bayesian probability, whic is best explained by referring to the original blog post, or his notebook, or his follow up posts on the topic. . This post extends on his notebook, which caululated $R_t$ for the states in the US, by calculating $R_t$ for Canada. What follows is mostly his original noteboo, with his explanations, except where I have made some changes to swap in Canadian data, or to make editorial comments. . Technical Setup . import pandas as pd import numpy as np from matplotlib import pyplot as plt from matplotlib.dates import date2num, num2date from matplotlib import dates as mdates from matplotlib import ticker from matplotlib.colors import ListedColormap from matplotlib.patches import Patch from scipy import stats as sps from scipy.interpolate import interp1d from IPython.display import clear_output k = np.array([20, 40, 55, 90]) # We create an array for every possible value of Rt R_T_MAX = 12 r_t_range = np.linspace(0, R_T_MAX, R_T_MAX*100+1) GAMMA = 1/7 FILTERED_REGIONS_CANADA = [&#39;Grand Princess&#39;, &#39;Diamond Princess&#39;, &#39;Recovered&#39;, &#39;Northwest Territories&#39;, &#39;Prince Edward Island&#39;, &#39;Yukon&#39;] MIN_CASES = 10 MIN_CASES_BY_PROVINCE = {&#39;New Brunswick&#39;: 4, &#39;Prince Edward Island&#39;: 2} %config InlineBackend.figure_format = &#39;retina&#39; . Get Canadian Data . To start, we will load the data for Canadian provinces from the Johns Hopkins CSSE repository, and transform it to match nthe data format in Kevin&#39;s notebook. . CSSE_URL = &#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/&#39; CONFIRMED_URL = f&#39;{CSSE_URL}/time_series_covid19_confirmed_global.csv&#39; confirmed = pd.read_csv(CONFIRMED_URL) canada_wide = confirmed[confirmed[&quot;Country/Region&quot;] == &#39;Canada&#39;] . From wide to long . The data is originally in wide format, which means that each new day is a new column, and so the data will stretch as wide as there are days. Converting from wide to long data format will frequently be a data processing step that you are required to do as a data scientist. Here we are showing the first 10 columns of the dataset. . You will also notice that it contains Grand Princess and Diamond Princess, which are two cruise ships that were early sources of COVID19 infections in Canada. We will remove those later, along with Recovered, which we don&#39;t need since we are only looking at provinces. . canada_wide.iloc[:, :10].style.hide_index() . Province/State Country/Region Lat Long 1/22/20 1/23/20 1/24/20 1/25/20 1/26/20 1/27/20 . Alberta | Canada | 53.933300 | -116.576500 | 0 | 0 | 0 | 0 | 0 | 0 | . British Columbia | Canada | 49.282700 | -123.120700 | 0 | 0 | 0 | 0 | 0 | 0 | . Grand Princess | Canada | 37.648900 | -122.665500 | 0 | 0 | 0 | 0 | 0 | 0 | . Manitoba | Canada | 53.760900 | -98.813900 | 0 | 0 | 0 | 0 | 0 | 0 | . New Brunswick | Canada | 46.565300 | -66.461900 | 0 | 0 | 0 | 0 | 0 | 0 | . Newfoundland and Labrador | Canada | 53.135500 | -57.660400 | 0 | 0 | 0 | 0 | 0 | 0 | . Nova Scotia | Canada | 44.682000 | -63.744300 | 0 | 0 | 0 | 0 | 0 | 0 | . Ontario | Canada | 51.253800 | -85.323200 | 0 | 0 | 0 | 0 | 1 | 1 | . Prince Edward Island | Canada | 46.510700 | -63.416800 | 0 | 0 | 0 | 0 | 0 | 0 | . Quebec | Canada | 52.939900 | -73.549100 | 0 | 0 | 0 | 0 | 0 | 0 | . Saskatchewan | Canada | 52.939900 | -106.450900 | 0 | 0 | 0 | 0 | 0 | 0 | . Diamond Princess | Canada | 0.000000 | 0.000000 | 0 | 0 | 0 | 0 | 0 | 0 | . Recovered | Canada | 0.000000 | 0.000000 | 0 | 0 | 0 | 0 | 0 | 0 | . Northwest Territories | Canada | 64.825500 | -124.845700 | 0 | 0 | 0 | 0 | 0 | 0 | . Yukon | Canada | 64.282300 | -135.000000 | 0 | 0 | 0 | 0 | 0 | 0 | . The following code performs a melt on the data, which converts from wide to long format. . dates = canada_wide.columns[4:] provinces = canada_wide.melt(id_vars=[&#39;Province/State&#39;], value_vars=dates, var_name=&#39;date&#39;, value_name=&#39;positive&#39;).rename(columns={&#39;Province/State&#39;: &#39;province&#39;}) provinces.date = pd.to_datetime(provinces.date) provinces = provinces.groupby([&#39;province&#39;, &#39;date&#39;]).sum().squeeze() . We are left with the data for the Canadian provinces, with the province and date being the index. . provinces . province date Alberta 2020-01-22 0 2020-01-23 0 2020-01-24 0 2020-01-25 0 2020-01-26 0 .. Yukon 2020-04-19 9 2020-04-20 11 2020-04-21 11 2020-04-22 11 2020-04-23 11 Name: positive, Length: 1395, dtype: int64 . Apply Gaussian smoothing . This is a step that Kevin does in his notebook, which produces a smoother, more Gaussian data series. Here are his original notes . Taking a look at the state, we need to start the analysis when there are a consistent number of cases each day. Find the last zero new case day and start on the day after that. . Also, case reporting is very erratic based on testing backlogs, etc. To get the best view of the &#39;true&#39; data we can, I&#39;ve applied a gaussian filter to the time series. This is obviously an arbitrary choice, but you&#39;d imagine the real world process is not nearly as stochastic as the actual reporting. . And here is this process applied to Ontario&#39;s data. . province_name = &#39;Ontario&#39; def prepare_cases(cases, min_cases=MIN_CASES): new_cases = cases.diff() smoothed = new_cases.rolling(9, win_type=&#39;gaussian&#39;, min_periods=1, center=True).mean(std=3).round() idx_start = np.searchsorted(smoothed, min_cases) smoothed = smoothed.iloc[idx_start:] original = new_cases.loc[smoothed.index] return original, smoothed cases = provinces.xs(province_name).rename(f&quot;{province_name} cases&quot;) original, smoothed = prepare_cases(cases) original.plot(title=f&quot;{province_name} New Cases per Day&quot;, c=&#39;k&#39;, linestyle=&#39;:&#39;, alpha=.5, label=&#39;Actual&#39;, legend=True, figsize=(500/72, 400/72)) ax = smoothed.plot(label=&#39;Smoothed&#39;, legend=True) ax.get_figure().set_facecolor(&#39;w&#39;) . Running the Algorithm . Choosing the Gaussian $ sigma$ for $P(R_t|R_{t-1})$ . . Note: you can safely skip this section if you trust that we chose the right value of $ sigma$ for the process below. Otherwise, read on. The original approach simply selects yesterday&#39;s posterior as today&#39;s prior. While intuitive, doing so doesn&#39;t allow for our belief that the value of $R_t$ has likely changed from yesterday. To allow for that change, we apply Gaussian noise to the prior distribution with some standard deviation $ sigma$. The higher $ sigma$ the more noise and the more we will expect the value of $R_t$ to drift each day. Interestingly, applying noise on noise iteratively means that there will be a natural decay of distant posteriors. This approach has a similar effect of windowing, but is more robust and doesn&#39;t arbitrarily forget posteriors after a certain time like my previous approach. Specifically, windowing computed a fixed $R_t$ at each time $t$ that explained the surrounding $w$ days of cases, while the new approach computes a series of $R_t$ values that explains all the cases, assuming that $R_t$ fluctuates by about $ sigma$ each day. . However, there&#39;s still an arbitrary choice: what should $ sigma$ be? Adam Lerer pointed out that we can use the process of maximum likelihood to inform our choice. Here&#39;s how it works: . Maximum likelihood says that we&#39;d like to choose a $ sigma$ that maximizes the likelihood of seeing our data $k$: $P(k| sigma)$. Since $ sigma$ is a fixed value, let&#39;s leave it out of the notation, so we&#39;re trying to maximize $P(k)$ over all choices of $ sigma$. . Since $P(k)=P(k_0,k_1, ldots,k_t)=P(k_0)P(k_1) ldots P(k_t)$ we need to define $P(k_t)$. It turns out this is the denominator of Bayes rule: . $$P(R_t|k_t) = frac{P(k_t|R_t)P(R_t)}{P(k_t)}$$ . To calculate it, we notice that the numerator is actually just the joint distribution of $k$ and $R$: . $$ P(k_t,R_t) = P(k_t|R_t)P(R_t) $$ . We can marginalize the distribution over $R_t$ to get $P(k_t)$: . $$ P(k_t) = sum_{R_{t}}{P(k_t|R_t)P(R_t)} $$ . So, if we sum the distribution of the numerator over all values of $R_t$, we get $P(k_t)$. And since we&#39;re calculating that anyway as we&#39;re calculating the posterior, we&#39;ll just keep track of it separately. . Since we&#39;re looking for the value of $ sigma$ that maximizes $P(k)$ overall, we actually want to maximize: . $$ prod_{t,i}{p(k_{ti})}$$ . where $t$ are all times and $i$ is each state. . Since we&#39;re multiplying lots of tiny probabilities together, it can be easier (and less error-prone) to take the $ log$ of the values and add them together. Remember that $ log{ab}= log{a}+ log{b}$. And since logarithms are monotonically increasing, maximizing the sum of the $ log$ of the probabilities is the same as maximizing the product of the non-logarithmic probabilities for any choice of $ sigma$. . Function for Calculating the Posteriors . To calculate the posteriors we follow these steps: . Calculate $ lambda$ - the expected arrival rate for every day&#39;s poisson process | Calculate each day&#39;s likelihood distribution over all possible values of $R_t$ | Calculate the process matrix based on the value of $ sigma$ we discussed above | Calculate our initial prior because our first day does not have a previous day from which to take the posterior Based on info from the cdc we will choose a Gamma with mean 7. | . | Loop from day 1 to the end, doing the following: Calculate the prior by applying the Gaussian to yesterday&#39;s prior. | Apply Bayes&#39; rule by multiplying this prior and the likelihood we calculated in step 2. | Divide by the probability of the data (also Bayes&#39; rule) | . | def get_posteriors(sr, sigma=0.15): # (1) Calculate Lambda lam = sr[:-1].values * np.exp(GAMMA * (r_t_range[:, None] - 1)) # (2) Calculate each day&#39;s likelihood likelihoods = pd.DataFrame( data = sps.poisson.pmf(sr[1:].values, lam), index = r_t_range, columns = sr.index[1:]) # (3) Create the Gaussian Matrix process_matrix = sps.norm(loc=r_t_range, scale=sigma ).pdf(r_t_range[:, None]) # (3a) Normalize all rows to sum to 1 process_matrix /= process_matrix.sum(axis=0) # (4) Calculate the initial prior prior0 = sps.gamma(a=4).pdf(r_t_range) prior0 /= prior0.sum() # Create a DataFrame that will hold our posteriors for each day # Insert our prior as the first posterior. posteriors = pd.DataFrame( index=r_t_range, columns=sr.index, data={sr.index[0]: prior0} ) # We said we&#39;d keep track of the sum of the log of the probability # of the data for maximum likelihood calculation. log_likelihood = 0.0 # (5) Iteratively apply Bayes&#39; rule for previous_day, current_day in zip(sr.index[:-1], sr.index[1:]): #(5a) Calculate the new prior current_prior = process_matrix @ posteriors[previous_day] #(5b) Calculate the numerator of Bayes&#39; Rule: P(k|R_t)P(R_t) numerator = likelihoods[current_day] * current_prior #(5c) Calcluate the denominator of Bayes&#39; Rule P(k) denominator = np.sum(numerator) # Execute full Bayes&#39; Rule posteriors[current_day] = numerator/denominator # Add to the running sum of log likelihoods log_likelihood += np.log(denominator) return posteriors, log_likelihood # Note that we&#39;re fixing sigma to a value just for the example posteriors, log_likelihood = get_posteriors(smoothed, sigma=.25) . The Result . Below you can see every day (row) of the posterior distribution plotted simultaneously. The posteriors start without much confidence (wide) and become progressively more confident (narrower) about the true value of $R_t$ . ax = posteriors.plot(title=f&#39;{province_name} - Daily Posterior for $R_t$&#39;, legend=False, lw=1, c=&#39;k&#39;, alpha=.3, xlim=(0.4,6)) ax.set_xlabel(&#39;$R_t$&#39;); . Plotting in the Time Domain with Credible Intervals . Since our results include uncertainty, we&#39;d like to be able to view the most likely value of $R_t$ along with its highest-density interval. . def highest_density_interval(pmf, p=.9): # If we pass a DataFrame, just call this recursively on the columns if(isinstance(pmf, pd.DataFrame)): return pd.DataFrame([highest_density_interval(pmf[col], p=p) for col in pmf], index=pmf.columns) cumsum = np.cumsum(pmf.values) best = None for i, value in enumerate(cumsum): for j, high_value in enumerate(cumsum[i+1:]): if (high_value-value &gt; p) and (not best or j&lt;best[1]-best[0]): best = (i, i+j+1) break low = pmf.index[best[0]] high = pmf.index[best[1]] return pd.Series([low, high], index=[f&#39;Low_{p*100:.0f}&#39;, f&#39;High_{p*100:.0f}&#39;]) # Note that this takes a while to execute - it&#39;s not the most efficient algorithm hdis = highest_density_interval(posteriors, p=.9) most_likely = posteriors.idxmax().rename(&#39;ML&#39;) # Look into why you shift -1 result = pd.concat([most_likely, hdis], axis=1) result.tail() . ML Low_90 High_90 . date . 2020-04-19 0.99 | 0.65 | 1.33 | . 2020-04-20 0.95 | 0.61 | 1.30 | . 2020-04-21 0.68 | 0.34 | 1.04 | . 2020-04-22 0.89 | 0.54 | 1.25 | . 2020-04-23 0.99 | 0.65 | 1.36 | . Plotting $R_t$ for Ontario . def plot_rt(result, ax, state_name): ax.set_title(f&quot;{state_name}&quot;) # Colors ABOVE = [1,0,0] MIDDLE = [1,1,1] BELOW = [0,0,0] cmap = ListedColormap(np.r_[ np.linspace(BELOW,MIDDLE,25), np.linspace(MIDDLE,ABOVE,25) ]) color_mapped = lambda y: np.clip(y, .5, 1.5)-.5 index = result[&#39;ML&#39;].index.get_level_values(&#39;date&#39;) values = result[&#39;ML&#39;].values # Plot dots and line ax.plot(index, values, c=&#39;k&#39;, zorder=1, alpha=.25) ax.scatter(index, values, s=40, lw=.5, c=cmap(color_mapped(values)), edgecolors=&#39;k&#39;, zorder=2) # Aesthetically, extrapolate credible interval by 1 day either side lowfn = interp1d(date2num(index), result[&#39;Low_90&#39;].values, bounds_error=False, fill_value=&#39;extrapolate&#39;) highfn = interp1d(date2num(index), result[&#39;High_90&#39;].values, bounds_error=False, fill_value=&#39;extrapolate&#39;) extended = pd.date_range(start=pd.Timestamp(&#39;2020-03-01&#39;), end=index[-1]+pd.Timedelta(days=1)) ax.fill_between(extended, lowfn(date2num(extended)), highfn(date2num(extended)), color=&#39;k&#39;, alpha=.1, lw=0, zorder=3) ax.axhline(1.0, c=&#39;k&#39;, lw=1, label=&#39;$R_t=1.0$&#39;, alpha=.25); # Formatting ax.xaxis.set_major_locator(mdates.MonthLocator()) ax.xaxis.set_major_formatter(mdates.DateFormatter(&#39;%b&#39;)) ax.xaxis.set_minor_locator(mdates.DayLocator()) ax.yaxis.set_major_locator(ticker.MultipleLocator(1)) ax.yaxis.set_major_formatter(ticker.StrMethodFormatter(&quot;{x:.1f}&quot;)) ax.yaxis.tick_right() ax.spines[&#39;left&#39;].set_visible(False) ax.spines[&#39;bottom&#39;].set_visible(False) ax.spines[&#39;right&#39;].set_visible(False) ax.margins(0) ax.grid(which=&#39;major&#39;, axis=&#39;y&#39;, c=&#39;k&#39;, alpha=.1, zorder=-2) ax.margins(0) ax.set_ylim(0.0, 5.0) ax.set_xlim(pd.Timestamp(&#39;2020-03-01&#39;), result.index.get_level_values(&#39;date&#39;)[-1]+pd.Timedelta(days=1)) fig.set_facecolor(&#39;w&#39;) fig, ax = plt.subplots(figsize=(600/72,400/72)) plot_rt(result, ax, province_name) ax.set_title(f&#39;Real-time $R_t$ for {province_name}&#39;) ax.xaxis.set_major_locator(mdates.WeekdayLocator()) ax.xaxis.set_major_formatter(mdates.DateFormatter(&#39;%b %d&#39;)) . Choosing the optimal $ sigma$ . In the previous section we described choosing an optimal $ sigma$, but we just assumed a value. But now that we can evaluate each state with any sigma, we have the tools for choosing the optimal $ sigma$. . Above we said we&#39;d choose the value of $ sigma$ that maximizes the likelihood of the data $P(k)$. Since we don&#39;t want to overfit on any one state, we choose the sigma that maximizes $P(k)$ over every state. To do this, we add up all the log likelihoods per state for each value of sigma then choose the maximum. . Note: this takes a while! . sigmas = np.linspace(1/20, 1, 20) targets = ~provinces.index.get_level_values(&#39;province&#39;).isin(FILTERED_REGIONS_CANADA) provinces_to_process = provinces.loc[targets] results = {} for province_name, cases in provinces_to_process.groupby(level=&#39;province&#39;): print(province_name) new, smoothed = prepare_cases(cases, MIN_CASES_BY_PROVINCE.get(province_name, MIN_CASES)) result = {} # Holds all posteriors with every given value of sigma result[&#39;posteriors&#39;] = [] # Holds the log likelihood across all k for each value of sigma result[&#39;log_likelihoods&#39;] = [] for sigma in sigmas: posteriors, log_likelihood = get_posteriors(smoothed, sigma=sigma) result[&#39;posteriors&#39;].append(posteriors) result[&#39;log_likelihoods&#39;].append(log_likelihood) # Store all results keyed off of state name results[province_name] = result clear_output(wait=True) print(&#39;Done.&#39;) . Done. . Sum for each value of sigma across provinces . Now that we have all the log likelihoods, we can sum for each value of sigma across provinces, graph it, then choose the maximum. . # Each index of this array holds the total of the log likelihoods for # the corresponding index of the sigmas array. total_log_likelihoods = np.zeros_like(sigmas) # Loop through each state&#39;s results and add the log likelihoods to the running total. for province_name, result in results.items(): total_log_likelihoods += result[&#39;log_likelihoods&#39;] # Select the index with the largest log likelihood total max_likelihood_index = total_log_likelihoods.argmax() # Select the value that has the highest log likelihood sigma = sigmas[max_likelihood_index] # Plot it fig, ax = plt.subplots() ax.set_title(f&quot;Maximum Likelihood value for $ sigma$ = {sigma:.2f}&quot;); ax.plot(sigmas, total_log_likelihoods) ax.axvline(sigma, color=&#39;k&#39;, linestyle=&quot;:&quot;) . &lt;matplotlib.lines.Line2D at 0x281370a8288&gt; . Compile Final Results . Given that we&#39;ve selected the optimal $ sigma$, let&#39;s grab the precalculated posterior corresponding to that value of $ sigma$ for each state. Let&#39;s also calculate the 90% and 50% highest density intervals (this takes a little while) and also the most likely value. . final_results = None for province_name, result in results.items(): print(province_name) posteriors = result[&#39;posteriors&#39;][max_likelihood_index] hdis_90 = highest_density_interval(posteriors, p=.9) hdis_50 = highest_density_interval(posteriors, p=.5) most_likely = posteriors.idxmax().rename(&#39;ML&#39;) result = pd.concat([most_likely, hdis_90, hdis_50], axis=1) if final_results is None: final_results = result else: final_results = pd.concat([final_results, result]) clear_output(wait=True) print(&#39;Done.&#39;) . Done. . Plot All Canadian Provinces . ncols = 3 nrows = int(np.ceil(len(results) / ncols)) fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(15, nrows*3)) for i, (province_name, result) in enumerate(final_results.groupby(&#39;province&#39;)): plot_rt(result, axes.flat[i], province_name) fig.tight_layout() fig.set_facecolor(&#39;w&#39;) . plt.savefig(&#39;books_read.png&#39;) . &lt;Figure size 432x288 with 0 Axes&gt; . Standings . FULL_COLOR = [.7,.7,.7] NONE_COLOR = [179/255,35/255,14/255] PARTIAL_COLOR = [.5,.5,.5] ERROR_BAR_COLOR = [.3,.3,.3] filtered = final_results.index.get_level_values(0).isin(FILTERED_REGIONS_CANADA) mr = final_results.loc[~filtered].groupby(level=0)[[&#39;ML&#39;, &#39;High_90&#39;, &#39;Low_90&#39;]].last() def plot_standings(mr, figsize=None, title=&#39;Most Recent $R_t$ by Province&#39;): if not figsize: figsize = ((15.9/50)*len(mr)+.1,2.5) fig, ax = plt.subplots(figsize=figsize) ax.set_title(title) err = mr[[&#39;Low_90&#39;, &#39;High_90&#39;]].sub(mr[&#39;ML&#39;], axis=0).abs() bars = ax.bar(mr.index, mr[&#39;ML&#39;], width=.825, color=FULL_COLOR, ecolor=ERROR_BAR_COLOR, capsize=2, error_kw={&#39;alpha&#39;:.5, &#39;lw&#39;:1}, yerr=err.values.T) labels = mr.index.to_series().replace({&#39;District of Columbia&#39;:&#39;DC&#39;}) ax.set_xticklabels(labels, rotation=90, fontsize=11) ax.margins(0) ax.set_ylim(0,2.) ax.axhline(1.0, linestyle=&#39;:&#39;, color=&#39;k&#39;, lw=1) fig.set_facecolor(&#39;w&#39;) return fig, ax mr.sort_values(&#39;ML&#39;, inplace=True) plot_standings(mr, figsize=(8,4)); . mr.sort_values(&#39;High_90&#39;, inplace=True) plot_standings(mr, figsize=(8,4)); .",
            "url": "https://dgunning.github.io/blog/charts/visualization/data/2020/04/20/realtime-Rt-Canada.html",
            "relUrl": "/charts/visualization/data/2020/04/20/realtime-Rt-Canada.html",
            "date": " • Apr 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Model Explainability¶",
            "content": ". Machine learning models can often be hard to understand and explain, in terms of how the model works to produce its predictions. Often we need to show how each of the features impact on the predictions. This is not just a theoretical problem - there may be laws in the future that will compel us to be able to explain how and why models arrived at their values. . A model fingerprint is an explanation of a model that describes what effect each of the model&#39;s features have on the target. This allows you to see inside the model at each feature, and get an explanation on that feature and how it impacts the model. The feature effects are broken down into three types . linear a change in the feature results in a constant change in the target | non-linear a change in the feature does not result in a constant change in the target | interaction These result from more than one features combining to produce an impact on the target, different from the effect that each feature has in isolation. | . Model Fingerprint . The implementation of model fingerprints is from the mlfinlab library. mlfinlab depends on scipy, numba and a few other scientific python libraries that are tricky to install locally, but is installable with no problem on Google Colab. If you want to run the notebook, then uncomment below and run to install mlfinlab. . # !pip install mlfinlab . Load Data from sklearn.datasets . To demonstrate, first we load some data from sklearn.datasets . from sklearn.datasets import load_boston import pandas as pd data = load_boston() X = pd.DataFrame(data[&#39;data&#39;], columns=data[&#39;feature_names&#39;]) y = pd.Series(data[&#39;target&#39;]) . Create a Model . The model we will use is a GradientBoostingRegressor . from sklearn.ensemble import GradientBoostingRegressor clf = GradientBoostingRegressor(n_estimators=60, random_state=77) clf.fit(X,y) . GradientBoostingRegressor(alpha=0.9, criterion=&#39;friedman_mse&#39;, init=None, learning_rate=0.1, loss=&#39;ls&#39;, max_depth=3, max_features=None, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, min_samples_leaf=1, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=60, n_iter_no_change=None, presort=&#39;auto&#39;, random_state=77, subsample=1.0, tol=0.0001, validation_fraction=0.1, verbose=0, warm_start=False) . Get the Model Fingerprint . The class that implements the model fingerprint is the RegressionModelFingerprint. This we fit on the classifier we trained earlier. We also pass as parameters the tuples that we which to see the interaction effects for. . from mlfinlab.feature_importance import RegressionModelFingerprint reg_fingerprint = RegressionModelFingerprint() reg_fingerprint.fit(clf, X, num_values=20, pairwise_combinations=[(&#39;CRIM&#39;, &#39;ZN&#39;), (&#39;RM&#39;, &#39;AGE&#39;), (&#39;LSTAT&#39;, &#39;DIS&#39;)]) linear_effect, non_linear_effect, pairwise_effect = reg_fingerprint.get_effects() . Linear Effects . pd.DataFrame({&#39;feature&#39;: list(linear_effect[&#39;norm&#39;].keys()), &#39;effect&#39;: list(linear_effect[&#39;norm&#39;].values())}) .set_index(&#39;feature&#39;).sort_values(&#39;effect&#39;, ascending=False) . effect . feature . LSTAT | 0.332337 | . RM | 0.228615 | . DIS | 0.107575 | . PTRATIO | 0.085696 | . NOX | 0.059710 | . AGE | 0.056358 | . TAX | 0.043767 | . B | 0.036869 | . CRIM | 0.024518 | . CHAS | 0.009183 | . RAD | 0.006958 | . INDUS | 0.005403 | . ZN | 0.003011 | . Non-Linear Effects . pd.DataFrame({&#39;feature&#39;: list(non_linear_effect[&#39;norm&#39;].keys()), &#39;effect&#39;: list(non_linear_effect[&#39;norm&#39;].values())}) .set_index(&#39;feature&#39;).sort_values(&#39;effect&#39;, ascending=False) . effect . feature . RM | 2.832436e-01 | . LSTAT | 2.364719e-01 | . DIS | 2.050034e-01 | . NOX | 5.881008e-02 | . TAX | 5.800090e-02 | . PTRATIO | 5.147495e-02 | . CRIM | 4.230346e-02 | . AGE | 2.961393e-02 | . RAD | 1.434398e-02 | . INDUS | 1.024114e-02 | . B | 7.571608e-03 | . ZN | 2.921031e-03 | . CHAS | 5.831799e-16 | . Plot Feature Effects . To visualize the model fingerprint we call plot_effects. This produces a chart with three panes, one for each of the effects we are interested in. . import matplotlib.style as style style.use(&#39;seaborn&#39;) . fig = reg_fingerprint.plot_effects() fig.set_size_inches((14,5)) . Store the Fingerprint and the Model . One really useful thing you can do with scikitlean models is to store additional properties on them using the python dot syntax. This allows you to set information on models that would be useful after saving and reloading the model. In our case we would like to save the fingerprint and the feature names. . clf.fingerprint = reg_fingerprint clf.feature_names = X.columns.to_list() .",
            "url": "https://dgunning.github.io/blog/charts/visualization/data/2020/03/13/model-fingerprints.html",
            "relUrl": "/charts/visualization/data/2020/03/13/model-fingerprints.html",
            "date": " • Mar 13, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Artic Sea Ice Extent",
            "content": ". The chart above is from the book Data At Work by Jorge Camoes. In this article we try to recreate the chart from Chapter 13 - Profiling, that displays the extent of Artic and Antartic sea ice from 1978-2015. We will use the Altair charting library. . import pandas as pd import numpy as np from pathlib import Path import ipywidgets as widgets import calendar import altair as alt . Sea Ice Data Files . root=Path(&#39;../data/seaice&#39;) month_files = [str(f) for f in root.glob(&#39;*.csv&#39;)] . A function to load data for each month . def load_month(index): month_file = month_files[index] df = pd.read_csv(month_file, dtype={&#39;year&#39;: str}) df.columns = [col.strip() for col in df.columns] df = df.replace(-9999.0, np.nan).replace(&#39;-9999&#39;, np.nan) df = df.fillna(method=&#39;ffill&#39;) return df monthly_ice = {i : load_month(i) for i in range(len(month_files))} . Create the Sea Ice Extent Chart . height=140 width=100 def ice_chart(month, col=&#39;extent&#39;): return alt.Chart(monthly_ice[month]).mark_line().encode( x=alt.X(&#39;year:T&#39;, axis=alt.Axis(title=&#39;&#39;)), y=alt.Y(f&#39;{col}:Q&#39;, scale=alt.Scale(domain=(3, 18)), axis=alt.Axis(title=&#39;&#39;)) ).properties( height=height, width=width, title=f&#39;{calendar.month_name[month +1]}&#39; ) def ice_charts(col=&#39;extent&#39;): first_half = ice_chart(0, col) | ice_chart(1, col) | ice_chart(2, col) | ice_chart(3, col) | ice_chart(4, col) | ice_chart(5, col) second_half = ice_chart(6, col) | ice_chart(7, col) | ice_chart(8, col) | ice_chart(9, col) | ice_chart(10, col) | ice_chart(11, col) return alt.vconcat(first_half, second_half ).properties( title=f&#39;Monthly Sea Ice {col.title()} 1978-2020 million km u00B2&#39; ) . Monthly Artic Sea Ice Extent . After creating the ice_charts function we can now use it to display the charts. . ice_charts() . Monthly Sea Ice Area . ice_charts(&#39;area&#39;) .",
            "url": "https://dgunning.github.io/blog/charts/visualization/data/2020/03/12/artic-sea-ice-extent.html",
            "relUrl": "/charts/visualization/data/2020/03/12/artic-sea-ice-extent.html",
            "date": " • Mar 12, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Creating a Dataset for Classification",
            "content": ". Machine learning algorithms are fairly easy to use if you have data that matches exactly what the algorithms are designed for. To get going with an ML project with generic data, you could generate the data in the exact shape for your ML project. For example, if you want to do classification, then you will need a target columns with the predicted classes, and you will need a dataset with the features that could predict these classes. . If your machine learning project is in Python, then the best way to start is with scikit-learn. This easy to use yet powerful library also has convenience functions to generate test data, one of which is called make_classification. . make_classification . Scikit-learn has a utility function to generate test data for classification called make_classification. With it you can generate a numpy array with features along with another array with predicted classes. This function is in the datasets package so to use it you would do . from sklearn.datasets import make_classification . data, target = make_classification(...) . and you will get the data and the target with some relationship between the two sufficient to do some machine learning. Here is an example . First, set the random state . random_state=2 . from sklearn.datasets import make_classification data, target = make_classification(n_features=12, n_samples=100, random_state=random_state) . The data array is a numpy array of shape (n_samples, n_features) . data[:2], data.shape . (array([[ 0.65755125, -0.73564052, -0.25712497, 2.16246241, -0.46323032, 0.50442818, -0.1369783 , -2.42825346, -0.49282081, -0.64920516, 0.27511225, -0.45730883], [ 0.54894656, -0.07663956, -0.08224538, -0.15972413, 1.70937948, -1.82138864, -0.30466658, -2.02559359, 1.93662278, -1.31756727, -1.25432739, -1.71406741]]), (100, 12)) . The target is a numpy array of shape (n_samples). The values will be 0 or 1 because by default n_classes is 2 . target, target.shape . (array([0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0]), (100,)) . Training a RandomForestClassifier . Now that we have the data, we can train a classifier and use it to predict a label. . from sklearn.ensemble import RandomForestClassifier clf = RandomForestClassifier(max_depth=2, random_state=0) clf.fit(data, target) . RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None, criterion=&#39;gini&#39;, max_depth=2, max_features=&#39;auto&#39;, max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0, min_impurity_split=None, min_samples_leaf=1, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=None, oob_score=False, random_state=0, verbose=0, warm_start=False) . Predicting an output label . After training we predict by passing in a data array. For simplicity we just choose one of the data values and we get a predicted label. This is not groundbreaking machine learning, but it shows how to quickly get a dataset that you can use to try different machine learning algorithms. . clf.predict([data[90]]) . array([1]) . Create a classification dataframe . The downside of the make_classification function is that it create numpy arrays without meaningful feature names. The bigger problem is that the features have different aspects - some are informative, others are redundant, or simply plain noise, without any indicator of which is which. To improve on it you can create dataframes, which allow for meaningful names that help in analysis and explainability. . from sklearn.datasets import make_classification import pandas as pd from datetime import datetime def make_dataset(n_samples=1000, n_features=10, n_informative=6, n_redundant=2, n_classes=2, weights=None, random_state=2): data, target = make_classification(n_features=n_features, n_informative=n_informative, n_redundant=n_redundant, n_samples=n_samples, n_classes=n_classes, weights=weights, random_state=random_state, shuffle=False) index = pd.date_range(periods=n_samples, freq=pd.tseries.offsets.BDay(), end=datetime.today()).normalize() columns = [f&#39;Info{i}&#39; for i in range(n_informative)] + [f&#39;Redun{i}&#39; for i in range(n_redundant)] + [f&#39;Noise{i}&#39; for i in range(n_features - (n_informative + n_redundant))] df = pd.DataFrame(data, columns=columns, index=index).round(3) target = pd.Series(target, index=index) return df, target data, target = make_dataset(1000, n_features=8, n_informative=4, n_classes=3, random_state=random_state) . The features . The generated dataframe contains 8 columns. . Informative features These are informative features, meaning features that have a predictive relationship with the target | Redundant features These features are generated as linear random combinations of the informative features | Noise These are just noise, and should have no predictive power | . data . Info0 Info1 Info2 Info3 Redun0 Redun1 Noise0 Noise1 . 2016-06-20 1.744 | 1.871 | -1.446 | -1.364 | 1.321 | 0.481 | 1.188 | 1.070 | . 2016-06-21 0.632 | 0.028 | -0.756 | -1.235 | -0.475 | 1.227 | 0.005 | -0.076 | . 2016-06-22 0.879 | 0.957 | -1.149 | -0.020 | 0.880 | 0.246 | 0.282 | 0.761 | . 2016-06-23 1.673 | 0.602 | -1.594 | -1.734 | 0.159 | 1.664 | 2.256 | 0.028 | . 2016-06-24 0.385 | 0.067 | -1.948 | 0.851 | 0.025 | 1.189 | 1.010 | 0.528 | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 2020-04-13 -2.862 | -0.170 | 0.767 | -1.832 | -3.387 | 1.120 | -2.979 | 0.188 | . 2020-04-14 -3.282 | -1.113 | 0.751 | -0.832 | -3.789 | 1.281 | -1.391 | 0.114 | . 2020-04-15 -2.720 | -1.133 | 0.383 | 0.557 | -2.653 | 0.716 | 1.561 | -0.633 | . 2020-04-16 -0.499 | 0.354 | 0.266 | 0.690 | 0.304 | -0.744 | 1.183 | -1.057 | . 2020-04-17 2.431 | 0.276 | 0.548 | 2.319 | 3.936 | -2.577 | 0.539 | 1.430 | . 1000 rows × 8 columns . The target . The target variable contains the values 0,1,2 - three classes since we specified three classes in the make_dataset function call. These are roughly evenly distributed, though wecould have specified a different distribution of values. . pd.DataFrame(target, columns=[&#39;Target&#39;]).Target.value_counts().to_frame().sort_index() . Target . 0 334 | . 1 333 | . 2 333 | . Redundant Variables . If we plot the redundant variables we can see that it is a linear relationship to the informative variables. They can be safely dropped from the input features to a machine learning model, or otherwise handled in a special way. Of course, with real empirical data, you would not necessarily know that beforehand but would learn it during data exploration. . import altair as alt alt.Chart(data).mark_circle().encode( x=&#39;Info0&#39;, y=&#39;Redun1&#39; ).properties( title=&#39;Informative vs Redundant Variables&#39; ) . Informative Variables . The relationship between the informative variables and the target variables are a trickier to display on a chart because the target variable is categorical but if we plot we can see a relationship between these variables and the target. . To make it easier to see the relationship we bin the informative variables and set the size of the marker to the count in each bin. . df = data.copy() df[&#39;Target&#39;] = target . Plot Informative Variables vs Target . alt.Chart(df).mark_circle().encode( alt.X(&#39;Info0&#39;, bin=True), alt.Y(&#39;Target&#39;, bin=True), size=&#39;count()&#39; ).properties( title=&#39;Info1 vs Target&#39; ) . Noise . Noise seems, well random . alt.Chart(df).mark_circle().encode( alt.X(&#39;Noise0&#39;, bin=True), alt.Y(&#39;Target&#39;, bin=True), size=&#39;count()&#39; ).properties( title=&#39;Noise vs Target&#39; ) . Feature Importance . To see the importance of each feature, we train a RandomForestClassifier and then view or plot the feature importance. . clf = RandomForestClassifier(min_samples_split=4) clf.fit(data, target) feature_importance = pd.DataFrame({&#39;importance&#39;: clf.feature_importances_, &#39;feature&#39;: data.columns}).round(2) alt.Chart(feature_importance).mark_bar().encode( y=&#39;feature&#39;, x=&#39;importance:Q&#39; ).properties( title=&#39;Feature Importance&#39;, height=240 ) . As expected, the noise variables have the least importance. .",
            "url": "https://dgunning.github.io/blog/machinelearning/2020/03/09/creating-a-test-dataset.html",
            "relUrl": "/machinelearning/2020/03/09/creating-a-test-dataset.html",
            "date": " • Mar 9, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://dgunning.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://dgunning.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://dgunning.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dgunning.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}